package routines;

import routines.system.Dynamic;
import routines.system.DynamicMetadata;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class cr_DH_headerFromDynamicSchema {

    /**
     * read_header: returns | separated header information of dynamic schema passed.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Dynamic("newColumn") input: The dynamic columns need to be extracted.
     * 
     * {example} read_header("newColumn") # Column1|Column2|Column3...|ColumnN !.
     */
    public static String read_header(Dynamic header_in) {
    	Dynamic columns = header_in;
    	 String header_out = "";
    	for (int i = 0; i < columns.getColumnCount(); i++) {  
    	    DynamicMetadata columnMetadata = columns.getColumnMetadata(i);  
    	     header_out += columnMetadata.getName() + "|";
    	}
    	
    	return(header_out.substring(0,header_out.length()-1));
    }
}
